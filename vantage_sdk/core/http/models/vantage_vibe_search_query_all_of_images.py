# coding: utf-8

"""
    Vantage API

    This is a the API to interact with Vantage Discovery, the amazing Semantic Search Platform in the world.  We enable developers to build magical discovery experiences into their products and websites.  Some useful links: - [TODO: Semantic Search Guide: What Is It And Why Does It Matter?](https://www.bloomreach.com/en/blog/2019/semantic-search-explained-in-5-minutes)

    The version of the OpenAPI document: v1.1.2
    Contact: devrel@vantagediscovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from inspect import getfullargspec
from typing import TYPE_CHECKING, Any, Dict, List, Optional, Union

from pydantic import (
    BaseModel,
    Field,
    StrictStr,
    ValidationError,
    field_validator,
)
from typing_extensions import Literal

from vantage_sdk.core.http.models.vantage_vibe_image_base64 import (
    VantageVibeImageBase64,
)
from vantage_sdk.core.http.models.vantage_vibe_image_url import (
    VantageVibeImageUrl,
)


try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

VANTAGEVIBESEARCHQUERYALLOFIMAGES_ONE_OF_SCHEMAS = [
    "VantageVibeImageBase64",
    "VantageVibeImageUrl",
]


class VantageVibeSearchQueryAllOfImages(BaseModel):
    """
    VantageVibeSearchQueryAllOfImages
    """

    # data type: VantageVibeImageUrl
    oneof_schema_1_validator: Optional[VantageVibeImageUrl] = None
    # data type: VantageVibeImageBase64
    oneof_schema_2_validator: Optional[VantageVibeImageBase64] = None
    actual_instance: Optional[
        Union[VantageVibeImageBase64, VantageVibeImageUrl]
    ] = None
    one_of_schemas: List[str] = Literal[
        "VantageVibeImageBase64", "VantageVibeImageUrl"
    ]

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError(
                    "If a position argument is used, only 1 is allowed to set `actual_instance`"
                )
            if kwargs:
                raise ValueError(
                    "If a position argument is used, keyword arguments cannot be used."
                )
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = VantageVibeSearchQueryAllOfImages.model_construct()
        error_messages = []
        match = 0
        # validate data type: VantageVibeImageUrl
        if not isinstance(v, VantageVibeImageUrl):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `VantageVibeImageUrl`"
            )
        else:
            match += 1
        # validate data type: VantageVibeImageBase64
        if not isinstance(v, VantageVibeImageBase64):
            error_messages.append(
                f"Error! Input type `{type(v)}` is not `VantageVibeImageBase64`"
            )
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when setting `actual_instance` in VantageVibeSearchQueryAllOfImages with oneOf schemas: VantageVibeImageBase64, VantageVibeImageUrl. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when setting `actual_instance` in VantageVibeSearchQueryAllOfImages with oneOf schemas: VantageVibeImageBase64, VantageVibeImageUrl. Details: "
                + ", ".join(error_messages)
            )
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into VantageVibeImageUrl
        try:
            instance.actual_instance = VantageVibeImageUrl.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VantageVibeImageBase64
        try:
            instance.actual_instance = VantageVibeImageBase64.from_json(
                json_str
            )
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError(
                "Multiple matches found when deserializing the JSON string into VantageVibeSearchQueryAllOfImages with oneOf schemas: VantageVibeImageBase64, VantageVibeImageUrl. Details: "
                + ", ".join(error_messages)
            )
        elif match == 0:
            # no match
            raise ValueError(
                "No match found when deserializing the JSON string into VantageVibeSearchQueryAllOfImages with oneOf schemas: VantageVibeImageBase64, VantageVibeImageUrl. Details: "
                + ", ".join(error_messages)
            )
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())
