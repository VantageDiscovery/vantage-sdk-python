# coding: utf-8

"""
    Vantage Management API

    This is a the API to interact with Vantage Discovery, the amazing Semantic Search Platform in the world.  We enable developers to build magical discovery experiences into their products and websites.  Some useful links: - [TODO: Semantic Search Guide: What Is It And Why Does It Matter?](https://www.bloomreach.com/en/blog/2019/semantic-search-explained-in-5-minutes)

    The version of the OpenAPI document: v1.1.2
    Contact: devrel@vantagediscovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional

from pydantic import BaseModel, StrictInt, StrictStr

from vantage_sdk.core.http.models.facet_result import FacetResult
from vantage_sdk.core.http.models.search_result_results_inner import (
    SearchResultResultsInner,
)
from vantage_sdk.core.http.models.shopping_assistant_group_result import (
    ShoppingAssistantGroupResult,
)


try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class ShoppingAssistantResult(BaseModel):
    """
    ShoppingAssistantResult
    """  # noqa: E501

    request_id: Optional[StrictInt] = None
    status: Optional[StrictInt] = None
    message: Optional[StrictStr] = None
    results: Optional[List[SearchResultResultsInner]] = None
    facets: Optional[List[FacetResult]] = None
    groups: Optional[List[ShoppingAssistantGroupResult]] = None
    __properties: ClassVar[List[str]] = [
        "request_id",
        "status",
        "message",
        "results",
        "facets",
        "groups",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ShoppingAssistantResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        _items = []
        if self.results:
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict())
            _dict['results'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in facets (list)
        _items = []
        if self.facets:
            for _item in self.facets:
                if _item:
                    _items.append(_item.to_dict())
            _dict['facets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item in self.groups:
                if _item:
                    _items.append(_item.to_dict())
            _dict['groups'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ShoppingAssistantResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "request_id": obj.get("request_id"),
                "status": obj.get("status"),
                "message": obj.get("message"),
                "results": [
                    SearchResultResultsInner.from_dict(_item)
                    for _item in obj.get("results")
                ]
                if obj.get("results") is not None
                else None,
                "facets": [
                    FacetResult.from_dict(_item) for _item in obj.get("facets")
                ]
                if obj.get("facets") is not None
                else None,
                "groups": [
                    ShoppingAssistantGroupResult.from_dict(_item)
                    for _item in obj.get("groups")
                ]
                if obj.get("groups") is not None
                else None,
            }
        )
        return _obj
