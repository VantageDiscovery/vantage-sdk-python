# coding: utf-8

"""
    Vantage API

    This is a the API to interact with Vantage Discovery, the amazing Semantic Search Platform in the world.  We enable developers to build magical discovery experiences into their products and websites.  Some useful links: - [TODO: Semantic Search Guide: What Is It And Why Does It Matter?](https://www.bloomreach.com/en/blog/2019/semantic-search-explained-in-5-minutes)

    The version of the OpenAPI document: v1.1.2
    Contact: devrel@vantagediscovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import re  # noqa: F401
import warnings
from typing import List, Optional

from pydantic import Field, StrictStr, ValidationError, validate_arguments
from typing_extensions import Annotated

from vantage.core.http.api_client import ApiClient
from vantage.core.http.api_response import ApiResponse
from vantage.core.http.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)
from vantage.core.http.models.collection import Collection
from vantage.core.http.models.collection_modifiable import CollectionModifiable
from vantage.core.http.models.collection_upload_url import CollectionUploadURL
from vantage.core.http.models.collections_result_inner import (
    CollectionsResultInner,
)
from vantage.core.http.models.create_collection_request import (
    CreateCollectionRequest,
)


class CollectionManagementApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_collection(
        self,
        account_id: Annotated[
            StrictStr,
            Field(
                ..., description="The account id to create this collection in"
            ),
        ],
        create_collection_request: Annotated[
            CreateCollectionRequest,
            Field(
                ...,
                description="Configuration required to create Collection.  This is central to Vantage",
            ),
        ],
        **kwargs,
    ) -> Collection:  # noqa: E501
        """Create Collection  # noqa: E501

        Create a new <<glossary:collection>> in Vantage Discovery.  More information in [Collection Guide](/docs/collections)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_collection(account_id, create_collection_request, async_req=True)
        >>> result = thread.get()

        :param account_id: The account id to create this collection in (required)
        :type account_id: str
        :param create_collection_request: Configuration required to create Collection.  This is central to Vantage (required)
        :type create_collection_request: CreateCollectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Collection
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_collection_with_http_info(
            account_id, create_collection_request, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_collection_with_http_info(
        self,
        account_id: Annotated[
            StrictStr,
            Field(
                ..., description="The account id to create this collection in"
            ),
        ],
        create_collection_request: Annotated[
            CreateCollectionRequest,
            Field(
                ...,
                description="Configuration required to create Collection.  This is central to Vantage",
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Create Collection  # noqa: E501

        Create a new <<glossary:collection>> in Vantage Discovery.  More information in [Collection Guide](/docs/collections)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_collection_with_http_info(account_id, create_collection_request, async_req=True)
        >>> result = thread.get()

        :param account_id: The account id to create this collection in (required)
        :type account_id: str
        :param create_collection_request: Configuration required to create Collection.  This is central to Vantage (required)
        :type create_collection_request: CreateCollectionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Collection, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['account_id', 'create_collection_request']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['account_id'] is not None:
            _path_params['account_id'] = _params['account_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['create_collection_request'] is not None:
            _body_params = _params['create_collection_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            '_content_type',
            self.api_client.select_header_content_type(['application/json']),
        )
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Collection",
            '405': None,
        }

        return self.api_client.call_api(
            '/account/{account_id}/collection',
            'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'
            ),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def delete_collection(
        self,
        collection_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The collection id to deactivate {collection_id}",
            ),
        ],
        account_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The account id this collection id is located in",
            ),
        ],
        **kwargs,
    ) -> Collection:  # noqa: E501
        """Delete Collection  # noqa: E501

        Mark as deactivated {collection_id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection(collection_id, account_id, async_req=True)
        >>> result = thread.get()

        :param collection_id: The collection id to deactivate {collection_id} (required)
        :type collection_id: str
        :param account_id: The account id this collection id is located in (required)
        :type account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Collection
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_collection_with_http_info(
            collection_id, account_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def delete_collection_with_http_info(
        self,
        collection_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The collection id to deactivate {collection_id}",
            ),
        ],
        account_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The account id this collection id is located in",
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Delete Collection  # noqa: E501

        Mark as deactivated {collection_id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_with_http_info(collection_id, account_id, async_req=True)
        >>> result = thread.get()

        :param collection_id: The collection id to deactivate {collection_id} (required)
        :type collection_id: str
        :param account_id: The account id this collection id is located in (required)
        :type account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Collection, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['collection_id', 'account_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_id'] is not None:
            _path_params['collection_id'] = _params['collection_id']

        if _params['account_id'] is not None:
            _path_params['account_id'] = _params['account_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Collection",
            '405': None,
        }

        return self.api_client.call_api(
            '/account/{account_id}/collection/{collection_id}',
            'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'
            ),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def get_browser_upload_url(
        self,
        collection_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The collection id to get an upload link for for {collection_id}",
            ),
        ],
        account_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The account id this collection id is located in",
            ),
        ],
        customer_batch_identifier: Annotated[
            Optional[StrictStr],
            Field(
                description="The filename or batch identifier used to build the URL.  Typically will be the filename used in the browser upload.  If omitted, a guid is generated."
            ),
        ] = None,
        **kwargs,
    ) -> CollectionUploadURL:  # noqa: E501
        """Collection Upload File  # noqa: E501

        Get an upload URL to be able to upload for ingestion into  {collection_id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_browser_upload_url(collection_id, account_id, customer_batch_identifier, async_req=True)
        >>> result = thread.get()

        :param collection_id: The collection id to get an upload link for for {collection_id} (required)
        :type collection_id: str
        :param account_id: The account id this collection id is located in (required)
        :type account_id: str
        :param customer_batch_identifier: The filename or batch identifier used to build the URL.  Typically will be the filename used in the browser upload.  If omitted, a guid is generated.
        :type customer_batch_identifier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CollectionUploadURL
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_browser_upload_url_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_browser_upload_url_with_http_info(
            collection_id, account_id, customer_batch_identifier, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_browser_upload_url_with_http_info(
        self,
        collection_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The collection id to get an upload link for for {collection_id}",
            ),
        ],
        account_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The account id this collection id is located in",
            ),
        ],
        customer_batch_identifier: Annotated[
            Optional[StrictStr],
            Field(
                description="The filename or batch identifier used to build the URL.  Typically will be the filename used in the browser upload.  If omitted, a guid is generated."
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Collection Upload File  # noqa: E501

        Get an upload URL to be able to upload for ingestion into  {collection_id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_browser_upload_url_with_http_info(collection_id, account_id, customer_batch_identifier, async_req=True)
        >>> result = thread.get()

        :param collection_id: The collection id to get an upload link for for {collection_id} (required)
        :type collection_id: str
        :param account_id: The account id this collection id is located in (required)
        :type account_id: str
        :param customer_batch_identifier: The filename or batch identifier used to build the URL.  Typically will be the filename used in the browser upload.  If omitted, a guid is generated.
        :type customer_batch_identifier: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CollectionUploadURL, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'collection_id',
            'account_id',
            'customer_batch_identifier',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_browser_upload_url" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_id'] is not None:
            _path_params['collection_id'] = _params['collection_id']

        if _params['account_id'] is not None:
            _path_params['account_id'] = _params['account_id']

        # process the query parameters
        _query_params = []
        if _params.get('customer_batch_identifier') is not None:  # noqa: E501
            _query_params.append(
                (
                    'customer_batch_identifier',
                    _params['customer_batch_identifier'],
                )
            )

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "CollectionUploadURL",
            '405': None,
        }

        return self.api_client.call_api(
            '/account/{account_id}/collection/{collection_id}/get_upload_url',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'
            ),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def get_collection(
        self,
        collection_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The collection id to get details for {collection_id}",
            ),
        ],
        account_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The account id this collection id is located in",
            ),
        ],
        **kwargs,
    ) -> Collection:  # noqa: E501
        """Get Collection  # noqa: E501

        Get the collection object {collection_id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection(collection_id, account_id, async_req=True)
        >>> result = thread.get()

        :param collection_id: The collection id to get details for {collection_id} (required)
        :type collection_id: str
        :param account_id: The account id this collection id is located in (required)
        :type account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Collection
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_collection_with_http_info(
            collection_id, account_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_collection_with_http_info(
        self,
        collection_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The collection id to get details for {collection_id}",
            ),
        ],
        account_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The account id this collection id is located in",
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get Collection  # noqa: E501

        Get the collection object {collection_id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_collection_with_http_info(collection_id, account_id, async_req=True)
        >>> result = thread.get()

        :param collection_id: The collection id to get details for {collection_id} (required)
        :type collection_id: str
        :param account_id: The account id this collection id is located in (required)
        :type account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Collection, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['collection_id', 'account_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_id'] is not None:
            _path_params['collection_id'] = _params['collection_id']

        if _params['account_id'] is not None:
            _path_params['account_id'] = _params['account_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Collection",
            '405': None,
        }

        return self.api_client.call_api(
            '/account/{account_id}/collection/{collection_id}',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'
            ),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def list_collections(
        self,
        account_id: Annotated[
            StrictStr, Field(..., description="The account id")
        ],
        **kwargs,
    ) -> List[CollectionsResultInner]:  # noqa: E501
        """List Collections  # noqa: E501

        List the collections in account_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_collections(account_id, async_req=True)
        >>> result = thread.get()

        :param account_id: The account id (required)
        :type account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CollectionsResultInner]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_collections_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_collections_with_http_info(
            account_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def list_collections_with_http_info(
        self,
        account_id: Annotated[
            StrictStr, Field(..., description="The account id")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """List Collections  # noqa: E501

        List the collections in account_id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_collections_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param account_id: The account id (required)
        :type account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CollectionsResultInner], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['account_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_collections" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['account_id'] is not None:
            _path_params['account_id'] = _params['account_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[CollectionsResultInner]",
            '405': None,
        }

        return self.api_client.call_api(
            '/account/{account_id}/collection',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'
            ),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def update_collection(
        self,
        collection_id: Annotated[
            StrictStr,
            Field(
                ..., description="The collection id to update {collection_id}"
            ),
        ],
        account_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The account id this collection id is located in",
            ),
        ],
        collection_modifiable: Annotated[
            CollectionModifiable,
            Field(
                ..., description="Configuration required to update Collection."
            ),
        ],
        **kwargs,
    ) -> Collection:  # noqa: E501
        """Update collection  # noqa: E501

        Update the collection object {collection_id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_collection(collection_id, account_id, collection_modifiable, async_req=True)
        >>> result = thread.get()

        :param collection_id: The collection id to update {collection_id} (required)
        :type collection_id: str
        :param account_id: The account id this collection id is located in (required)
        :type account_id: str
        :param collection_modifiable: Configuration required to update Collection. (required)
        :type collection_modifiable: CollectionModifiable
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Collection
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_collection_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_collection_with_http_info(
            collection_id, account_id, collection_modifiable, **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_collection_with_http_info(
        self,
        collection_id: Annotated[
            StrictStr,
            Field(
                ..., description="The collection id to update {collection_id}"
            ),
        ],
        account_id: Annotated[
            StrictStr,
            Field(
                ...,
                description="The account id this collection id is located in",
            ),
        ],
        collection_modifiable: Annotated[
            CollectionModifiable,
            Field(
                ..., description="Configuration required to update Collection."
            ),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Update collection  # noqa: E501

        Update the collection object {collection_id}  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_collection_with_http_info(collection_id, account_id, collection_modifiable, async_req=True)
        >>> result = thread.get()

        :param collection_id: The collection id to update {collection_id} (required)
        :type collection_id: str
        :param account_id: The account id this collection id is located in (required)
        :type account_id: str
        :param collection_modifiable: Configuration required to update Collection. (required)
        :type collection_modifiable: CollectionModifiable
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Collection, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['collection_id', 'account_id', 'collection_modifiable']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_collection" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['collection_id'] is not None:
            _path_params['collection_id'] = _params['collection_id']

        if _params['account_id'] is not None:
            _path_params['account_id'] = _params['account_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['collection_modifiable'] is not None:
            _body_params = _params['collection_modifiable']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            '_content_type',
            self.api_client.select_header_content_type(['application/json']),
        )
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "Collection",
            '405': None,
        }

        return self.api_client.call_api(
            '/account/{account_id}/collection/{collection_id}',
            'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'
            ),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )
