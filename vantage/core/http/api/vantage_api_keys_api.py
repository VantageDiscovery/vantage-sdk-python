# coding: utf-8

"""
    Vantage API

    This is a the API to interact with Vantage Discovery, the amazing Semantic Search Platform in the world.  We enable developers to build magical discovery experiences into their products and websites.  Some useful links: - [TODO: Semantic Search Guide: What Is It And Why Does It Matter?](https://www.bloomreach.com/en/blog/2019/semantic-search-explained-in-5-minutes)

    The version of the OpenAPI document: v1.1.2
    Contact: devrel@vantagediscovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import re  # noqa: F401
import warnings

from pydantic import Field, StrictStr, ValidationError, validate_arguments
from typing_extensions import Annotated

from vantage.core.http.api_client import ApiClient
from vantage.core.http.api_response import ApiResponse
from vantage.core.http.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError,
)
from vantage.core.http.models.vantage_api_key import VantageAPIKey
from vantage.core.http.models.vantage_api_keys_result import (
    VantageAPIKeysResult,
)


class VantageAPIKeysApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_vantage_api_key(
        self,
        account_id: Annotated[
            StrictStr,
            Field(..., description="The account these keys are within"),
        ],
        vantage_api_key_id: Annotated[
            StrictStr, Field(..., description="The api_key to get values for")
        ],
        **kwargs,
    ) -> VantageAPIKey:  # noqa: E501
        """Get Vantage API key  # noqa: E501

        Get Vantage API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vantage_api_key(account_id, vantage_api_key_id, async_req=True)
        >>> result = thread.get()

        :param account_id: The account these keys are within (required)
        :type account_id: str
        :param vantage_api_key_id: The api_key to get values for (required)
        :type vantage_api_key_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VantageAPIKey
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_vantage_api_key_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_vantage_api_key_with_http_info(
            account_id, vantage_api_key_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_vantage_api_key_with_http_info(
        self,
        account_id: Annotated[
            StrictStr,
            Field(..., description="The account these keys are within"),
        ],
        vantage_api_key_id: Annotated[
            StrictStr, Field(..., description="The api_key to get values for")
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get Vantage API key  # noqa: E501

        Get Vantage API key  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vantage_api_key_with_http_info(account_id, vantage_api_key_id, async_req=True)
        >>> result = thread.get()

        :param account_id: The account these keys are within (required)
        :type account_id: str
        :param vantage_api_key_id: The api_key to get values for (required)
        :type vantage_api_key_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VantageAPIKey, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['account_id', 'vantage_api_key_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vantage_api_key" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['account_id'] is not None:
            _path_params['account_id'] = _params['account_id']

        if _params['vantage_api_key_id'] is not None:
            _path_params['vantage_api_key_id'] = _params['vantage_api_key_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "VantageAPIKey",
            '405': None,
        }

        return self.api_client.call_api(
            '/account/{account_id}/vantage_api_key/{vantage_api_key_id}',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'
            ),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def get_vantage_api_keys(
        self,
        account_id: Annotated[
            StrictStr,
            Field(..., description="The account these keys are within"),
        ],
        **kwargs,
    ) -> VantageAPIKeysResult:  # noqa: E501
        """Get Vantage API keys  # noqa: E501

        Get Vantage API keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vantage_api_keys(account_id, async_req=True)
        >>> result = thread.get()

        :param account_id: The account these keys are within (required)
        :type account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: VantageAPIKeysResult
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_vantage_api_keys_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_vantage_api_keys_with_http_info(
            account_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_vantage_api_keys_with_http_info(
        self,
        account_id: Annotated[
            StrictStr,
            Field(..., description="The account these keys are within"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Get Vantage API keys  # noqa: E501

        Get Vantage API keys  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vantage_api_keys_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param account_id: The account these keys are within (required)
        :type account_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(VantageAPIKeysResult, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['account_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_vantage_api_keys" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['account_id'] is not None:
            _path_params['account_id'] = _params['account_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json']
        )  # noqa: E501

        # authentication setting
        _auth_settings = ['BearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "VantageAPIKeysResult",
            '405': None,
        }

        return self.api_client.call_api(
            '/account/{account_id}/vantage_api_key',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get(
                '_return_http_data_only'
            ),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )
