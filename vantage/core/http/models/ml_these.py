# coding: utf-8

"""
    Vantage API

    This is a the API to interact with Vantage Discovery, the amazing Semantic Search Platform in the world.  We enable developers to build magical discovery experiences into their products and websites.  Some useful links: - [TODO: Semantic Search Guide: What Is It And Why Does It Matter?](https://www.bloomreach.com/en/blog/2019/semantic-search-explained-in-5-minutes)

    The version of the OpenAPI document: v1.1.2
    Contact: devrel@vantagediscovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, conlist
from vantage.core.http.models.ml_these_these_inner import MLTheseTheseInner

class MLThese(BaseModel):
    """
    MLThese
    """
    these: Optional[conlist(MLTheseTheseInner)] = None
    __properties = ["these"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MLThese:
        """Create an instance of MLThese from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in these (list)
        _items = []
        if self.these:
            for _item in self.these:
                if _item:
                    _items.append(_item.to_dict())
            _dict['these'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MLThese:
        """Create an instance of MLThese from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MLThese.parse_obj(obj)

        _obj = MLThese.parse_obj({
            "these": [MLTheseTheseInner.from_dict(_item) for _item in obj.get("these")] if obj.get("these") is not None else None
        })
        return _obj


